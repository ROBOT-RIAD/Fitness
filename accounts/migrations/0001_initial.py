# Generated by Django 5.2.3 on 2025-06-16 02:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('member', 'member')], max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='media/user_images/')),
                ('fullname', models.CharField(blank=True, max_length=200, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=15, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('height', models.FloatField(blank=True, null=True)),
                ('abdominal', models.FloatField(blank=True, null=True)),
                ('sacroiliac', models.FloatField(blank=True, null=True)),
                ('subscapularis', models.FloatField(blank=True, null=True)),
                ('triceps', models.FloatField(blank=True, null=True)),
                ('fitness_level', models.CharField(blank=True, choices=[('Beginners', 'Beginners'), ('Basic', 'Basic'), ('Intermediate', 'Intermediate'), ('High', 'High')], max_length=20, null=True)),
                ('trainer', models.CharField(blank=True, choices=[('At home', 'At Home'), ('At gym', 'At Gym'), ('Martial arts', 'Martial Arts'), ('Running', 'Running'), ('Other sports', 'Other Sports')], max_length=30, null=True)),
                ('at_home', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Dumbbells', 'Dumbbells'), ('Resistance bands', 'Resistance Bands'), ('Pull-up bar', 'Pull-up Bar'), ('Bench', 'Bench'), ('No equipment', 'No Equipment')], max_length=100, null=True)),
                ('at_gym', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Barbell', 'Barbell'), ('Squat rack', 'Squat Rack'), ('Cable machine', 'Cable Machine'), ('Smith machine', 'Smith Machine')], max_length=100, null=True)),
                ('martial_arts', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Running', 'Running'), ('Football', 'Football'), ('Swimming', 'Swimming')], max_length=100, null=True)),
                ('running', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Running', 'Running'), ('Football', 'Football'), ('Swimming', 'Swimming')], max_length=100, null=True)),
                ('other_sports', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Running', 'Running'), ('Football', 'Football'), ('Swimming', 'Swimming')], max_length=100, null=True)),
                ('train_duration', models.CharField(blank=True, max_length=100, null=True)),
                ('interested_workout', models.CharField(blank=True, choices=[('Lose Fat', 'Lose Fat'), ('Gain Muscle', 'Gain Muscle (only if % is already low)'), ('Maintenance', 'Maintenance')], max_length=50, null=True)),
                ('injuries_discomfort', models.TextField(blank=True, null=True)),
                ('routine_duration', models.CharField(blank=True, choices=[('1 Month', '1 Month'), ('2 Month', '2 Month'), ('3 Month', '3 Month'), ('6 Month', '6 Month'), ('1 Year', '1 Year')], max_length=20, null=True)),
                ('dietary_preferences', models.CharField(blank=True, choices=[('Keto', 'Keto'), ('Paleo', 'Paleo'), ('Vegetarian', 'Vegetarian'), ('Vegan', 'Vegan'), ('Gluten-Free', 'Gluten-Free'), ('No preferences', 'No Preferences')], max_length=30, null=True)),
                ('allergies', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Nuts', 'Nuts'), ('Dairy', 'Dairy'), ('Shellfish', 'Shellfish'), ('Eggs', 'Eggs'), ('No allergies', 'No Allergies')], max_length=100, null=True)),
                ('food_preference', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Egg', 'Egg'), ('Milk', 'Milk'), ('Fish', 'Fish')], max_length=100, null=True)),
                ('medical_conditions', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Diabetes', 'Diabetes'), ('High blood pressure', 'High Blood Pressure'), ('Heart disease', 'Heart Disease')], max_length=100, null=True)),
                ('fitness_goals', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Weight loss', 'Weight Loss'), ('Weight gain', 'Weight Gain'), ('Maintenance', 'Maintenance')], max_length=100, null=True)),
                ('lifestyle_habits', models.CharField(blank=True, choices=[('3 Meals', '3 Meals'), ('4 Meals', '4 Meals'), ('5 Meals', '5 Meals'), ('6 Meals', '6 Meals'), ('7 Meals', '7 Meals'), ('8 Meals', '8 Meals')], max_length=20, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
