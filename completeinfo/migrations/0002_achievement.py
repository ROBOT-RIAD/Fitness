# Generated by Django 5.2.3 on 2025-07-25 07:23

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('completeinfo', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight_change', models.DecimalField(decimal_places=2, help_text='Weight change in kg', max_digits=5)),
                ('abdominal_change', models.DecimalField(decimal_places=2, help_text='Percentage change in abdominal measurements', max_digits=5)),
                ('sacrolic_change', models.DecimalField(decimal_places=2, help_text='Percentage change in sacrolic measurements', max_digits=5)),
                ('subscapularis_change', models.DecimalField(decimal_places=2, help_text='Percentage change in subscapularis measurements', max_digits=5)),
                ('triceps_change', models.DecimalField(decimal_places=2, help_text='Percentage change in triceps measurements', max_digits=5)),
                ('weight_increase', models.BooleanField(default=False, help_text='True if weight measurement is an increase, False for decrease')),
                ('abdominal_increase', models.BooleanField(default=False, help_text='True if abdominal measurement is an increase, False for decrease')),
                ('sacrolic_increase', models.BooleanField(default=False, help_text='True if sacrolic measurement is an increase, False for decrease')),
                ('subscapularis_increase', models.BooleanField(default=False, help_text='True if subscapularis measurement is an increase, False for decrease')),
                ('triceps_increase', models.BooleanField(default=False, help_text='True if triceps measurement is an increase, False for decrease')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='Time when the achievement was created')),
                ('update_time', models.DateTimeField(auto_now=True, help_text='Time when the achievement was last updated')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='achievement', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Achievement',
                'verbose_name_plural': 'Achievements',
            },
        ),
    ]
